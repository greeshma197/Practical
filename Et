Prac 3
Demonstrate the use of lists set and dictionaries.
# List Operations
my_list = [10, 20, 25, 30, 40, 50]

# Append
my_list.append(60)
print("After append:", my_list)

# Clear
my_list.clear()
print("After clear:", my_list)

# Copy
my_list = [10, 25, 20, 30, 40, 50]
copy_of_my_list = my_list.copy()
print("Copy of list:", copy_of_my_list)

# Pop
last_item = my_list.pop()
print("Popped item:", last_item)
print("After pop:", my_list)

# Remove
my_list.remove(25)
print("After remove:", my_list)

# Tuple Operations
Tuple1 = ('a', 'b', 'c', 'd')
Tuple2 = ('e', 'f', 'g', 'h')

# Repetition
repeated_Tuple1 = Tuple1 * 2
print("Repeated Tuple1:", repeated_Tuple1)

# Concatenation
concatenated_Tuples = Tuple1 + Tuple2
print("Concatenated Tuple1 and Tuple2:", concatenated_Tuples)

# Membership
is_a_in_Tuple1 = 'a' in Tuple1
print("Is 'a' in Tuple1?", is_a_in_Tuple1)

# Iteration
print("Iterating over Tuple1:")
for item in Tuple1:
    print(item)

Set1 = (1, 4, 2, 4, 5, 6, 3, 5, 4, 6, 77, 8, 7, 7, 876)

Set2 = (3, 432, 5, 6, 4, 6, 7, 6, 5, 6, 54, 567, 5)

# Union
union_Set1_Set2 = Set1 | Set2
print("Union of Set1 and Set2:", union_Set1_Set2)

# Intersection
intersection_Set1_Set2 = Set1 & Set2
print("Intersection of Set1 and Set2:", intersection_Set1_Set2)

# Difference
difference_Set1_Set2 = Set1 - Set2
print("Difference of Set1 and Set2 (Set1-Set2):", difference_Set1_Set2)

# Symmetric difference
symmetric_difference_Set1_Set2 = Set1 ^ Set2  # Corrected operator here
print("Symmetric Difference of Set1 and Set2:", symmetric_difference_Set1_Set2)

# Dictionary Operations

dict = {'Name': 'Om Thakur', 'Age': 22}

# Length
length_given_dict = len(dict)
print("Length of Given Dictionary:", length_given_dict)

# String
string_given_dict = str(dict)
print("String representation of Given Dictionary:", string_given_dict)

dictionaries = {0: "Data", 1: "GREAT", 2: "LEARNING", 3: "Python", 4: "Happy"}

# Copy
copied_dictionaries = dictionaries.copy()
print("Copied Given Dictionary:", copied_dictionaries)

# Key
keys = ['a', 'b', 'c']
new_dict = dict.fromkeys(keys, "Default Value")
print("New Dictionary from Keys:", new_dict)

# Dict Value
values_given = dictionaries.values()
print("Values in Given Dictionary", list(values_given))

Prac 4
Demonstrate the use of high ordered functions.
# 1. Write a Python function to multiply all the numbers in a list.

def multiply_numbers(numbers):
    result = 1
    for num in numbers:
        result *= num  # Corrected multiplication here
    return result

# Example usage
numbers_list = [7, 8, 9]
print("Product of all numbers:", multiply_numbers(numbers_list))


# 2. Write a Python function to reverse a string use the while loop also?

def reverse_string(text):
    reversed_text = ""
    i = len(text) - 1  # Start from the last index

    while i >= 0:  # Loop until the first character (inclusive)
        reversed_text += text[i]
        i -= 1

    return reversed_text

print(reverse_string("Hello Python"))


# 3. Write a function to add and subtract two variables

def add_and_subtract(x, y):
    return x + y, x - y  # Return both sum and difference as a tuple

# Example usage:
result_sum, result_diff = add_and_subtract(10, 5)
print("Sum:", result_sum)
print("Difference:", result_diff)

# 4. Write a function to check if the number is divisible by 12

def is_divisible_by_12(number):
    if number % 12 == 0:
        return True
    return False

num = 36
if is_divisible_by_12(num):
    print(num, "is divisible by 12")
else:
    print(num, "is not divisible by 12")


# 5. Write a function to calculate the number of days and weeks

def calculate_weeks_and_days(total_days):
    weeks = total_days // 7  # Calculate the number of weeks
    days = total_days % 7  # Calculate the remaining days
    return weeks, days  # Return both weeks and days

# Example usage
number_of_days = 15
weeks, days = calculate_weeks_and_days(number_of_days) # Corrected function call here
print("Weeks:", weeks)
print("Days:", days)


# 6. Write a Python function to find 5! (5 factorial)

def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result = result * i  # Corrected multiplication here
    return result

print("5! =", factorial(5))  # Corrected output format

# 7. Write a Python function to find the unique elements of the first list.

def find_unique_elements(input_list):
    unique_elements = []
    for item in input_list:
        if item not in unique_elements:  # Corrected condition here
            unique_elements.append(item)
    return unique_elements

first_list = [1, 2, 3, 3, 3, 3, 4, 5, 4, 2, 4, 2, 4, 4, 2, 4, 5, 4, 34, 654, 5, 7, 6, 5, 4, 3]
unique_values = find_unique_elements(first_list)
print("Unique elements:", unique_values)


# 8. Required arguments

def simple_interest(principal, rate, time):
    interest = (principal * rate * time) / 100
    return interest

p = 1000  # Define p, r, and t before calling the function.
r = 5      # Assuming rate is 5%
t = 3
interest = simple_interest(p, r, t)
print("Simple Interest:", interest)


# 9. Keyword arguments

def greet(name, message):
    print("Hello,", name + "!")  # Added ! here
    print(message)

greet(name="Gagan", message="Happy Diwali!")  # Corrected spelling here


# 10. Default Arguments

def greet(name, message="Welcome to the program!"): # Corrected syntax here
    print("Hello,", name + "!")
    print(message)

greet("Alice")  # Using default message
greet("Bob", "Have a great day!")  # Providing custom message

# 11. Write a lambda function to find the sum of two numbers

add = lambda x, y: x + y  # Corrected syntax here
result = add(5, 3)
print("Sum:", result)


# 12. Adding two lists using map lis1 = [12, 24, 36] and lis2 = [41, 54, 69]
# Given lists
lis1 = [12, 24, 36]
lis2 = [41, 54, 69]
result = list(map(lambda x, y: x + y, lis1, lis2)) # Corrected syntax: x+y
print("Sum of two lists:", result)


# 13. Filter the lis1 = [3, 12, 24, 36, 43, 654, 65432, 2, 654, 455, 43, 543] which is not divided by 2?
lis1 = [3, 12, 24, 36, 43, 654, 65432, 2, 654, 455, 43, 543]
not_divisible_by_2 = list(filter(lambda x: x % 2 != 0, lis1)) # Corrected filter condition and syntax
print("Numbers not divisible by 2:", not_divisible_by_2)

Prac 5
Univariate analysis
# 1. Univariate Analysis using Pandas

# Import libraries and dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_boston = pd.read_csv("Boston.csv", index_col=0)

# Univariate Function
def univariate_analysis(data, column):
    print("-" * 80)  # Separator for better readability
    print(f"Univariate analysis of column '{column}':")
    print("-" * 80)

    # Descriptive stats
    print(data[column].describe(include='all'))
    print("-" * 80)

    print(f"Missing values in column '{column}': {data[column].isnull().sum()}")
    print("-" * 80)

    # Check Skewness of the data
    print(f"Skewness of '{column}': {data[column].skew()}")
    print("-" * 80)

    # Check Kurtosis of the data
    print(f"Kurtosis of '{column}': {data[column].kurt()}")
    print("-" * 80)

    print("IQR Range, Lower Fence, Upper Fence")

    # Get the IQR range from 75th percentile of data by subtracting the first quartile
    iqr_range = data[column].quantile(0.75) - data[column].quantile(0.25)

    # Store the lower and upper bound using the following formula
    lower_bound = data[column].quantile(0.25) - (1.5 * iqr_range)
    upper_bound = data[column].quantile(0.75) + (1.5 * iqr_range)

    print(f"IQR: {iqr_range}, Lower Bound: {lower_bound}, Upper Bound: {upper_bound}")
    print("-" * 80)

    # Z-score based outlier detection
    # Z-score formula to get the z-score value of all individual points
    scores = (data[column] - data[column].mean()) / data[column].std()

    # ... (The rest of the code for outlier analysis would go here)


# Example usage (you would call this function for each column you want to analyze)
univariate_analysis(df_boston, 'crim')  # Example: analyzing the 'crim' column
# univariate_analysis(df_boston, 'zn')  # Example: analyzing the 'zn' column
# ... analyze other columns as needed

Prac 6
Demonstrate correlation analysis. Use heatmap for visualization. Write Inferences.

# 1. Show Co-relation using HeatMap

# Import libraries and dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

car_df = pd.read_csv(r"C:\Users\gagan\Downloads\CarPrice.csv")

# Create Co-relation
filtered_df = car_df.select_dtypes(include=["int64", "float64"])

correlation_matrix = filtered_df.corr()

# Correlation matrix
plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 10})  # Corrected font size setting
sns.heatmap(correlation_matrix, square=True, linewidths=.5, vmax=1, annot=True, fmt=".2f", cmap="coolwarm") # Added cmap
plt.show()

Prac 7
Import a csv or excel file and demonstrate Data wrangling.
# 1. Youtube Channel Analysis

import pandas as pd

df = pd.read_csv(r"c:/Users/gagan/Downloads/youtube.csv")

# Assign Correct Datatypes
df["Subscriptions"] = df["Subscriptions"].str.extract(r'(\d+)')  # Use raw string for regex
df["Subscriptions"] = pd.to_numeric(df["Subscriptions"])

df["Uploads"] = df["Uploads"].str.replace(',', '')  # Remove commas
df["Uploads"] = pd.to_numeric(df["Uploads"])

df["Views"] = df["Views"].str.replace(r'[^\d]+', '', regex=True).astype("Int64")  # Remove non-digits and convert to Int64


# Print datatypes
print(df.dtypes)


# Question 01
print(df[(df['Chname'] == 'T-Series') | (df['Chname'] == 'Zee TV') | (df['Chname'] == 'SAB TV')])


# Question 02
print(df[df['Grade'].isin(['A++', 'A+'])].head(15))  # Filter for A++ and A+ and get top 15


# Question 03
print(df.groupby(['Chname', 'Subscriptions', 'Views']).agg({'Subscriptions': 'count'}).sort_values(by='Subscriptions', ascending=False).head(10))
# Question 03
print(df.groupby(['Chname', 'Subscriptions', 'Views']).size().sort_values(ascending=False).head(10))


# Question 04
print(df[df['Grade'] == 'A'].head(5))


# Question 05
print(df.groupby('Grade')['Subscriptions'].mean())


# Question 06
print(df[df['Grade'] == 'A++'].sort_values(by='Views', ascending=False).head(5))

Prac 8
Perform univariate bivariate and multivariate analysis using visualization techniques in Python. 
# Import Libraries and datasets

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_tip = pd.read_csv(r"c:\Users\gagan\Downloads\tips2.csv")

# Gender
df_tip['gender'] = df_tip['gender'].replace({0: 'Male', 1: 'Female'})
print(df_tip['gender'].value_counts())
sns.histplot(data=df_tip, x="bill")
plt.show()

# Tip Count

# Tip Count

sns.catplot(data=df_tip['day'].value_counts().reindex(['Thur', 'Fri', 'Sat', 'Sun']).reset_index(), x='day', y='count', kind="bar", hue="day", palette="viridis")

plt.title("Most Frequent Days")

plt.xlabel("Days")

plt.ylabel("No. of Customer Count")

plt.show()


# Count occurrences of time for each day
print(df_tip.groupby(['day', 'time']).size().unstack(fill_value=0))

# Count occurrences of time for each day (alternative)
print(pd.crosstab(df_tip['day'], df_tip['time']))


# Categories by Day
plt.pie(df_tip['day'].value_counts(), labels=['Thur', 'Fri', 'Sat', 'Sun'], autopct='%1.1f%%')
plt.title("Day of the Week Distribution")
plt.show()
# Count occurrences of time for each day
print(df_tip.groupby(['day', 'time']).size().unstack(fill_value=0))

# Create a grouped bar chart
time_counts = df_tip.groupby(['day', 'time']).size().unstack()
time_counts.plot(kind='bar', stacked=True, colormap='magma')  # Use a colormap
plt.title('Count of Time Categories by Day')
plt.xlabel('Day of the week')
plt.ylabel('Count')
plt.legend(title='Time of Day')
plt.show()

# Tip range
df_tip['tip_range'] = pd.cut(x=df_tip['tip'], bins=[0, 2, 4, 6, 8, 10], labels=['0-2', '2-4', '4-6', '6-8', '8-10'], include_lowest=True)
print(df_tip['tip_range'].value_counts())

Practical 9
#Perform Group by operations and sorting techniques
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

warnings.simplefilter(action='ignore', category=FutureWarning)

df = pd.read_csv("Bank.csv")

df = df.drop(columns=[df.columns[0]], axis=1)

# Create Bins
bins = [18, 28, 38, 48, 58, 68, 78, 88]
labels = ['18-28', '28-38', '38-48', '48-58', '58-68', '68-78', '78-87']

df['age group'] = pd.cut(df['age'], bins=bins, labels=labels, include_lowest=True)

print(df['age group'].value_counts())

print(df.groupby('job').agg({'job': 'count'}).head())

print(df.groupby(['age group', 'job']).agg({'job': 'count', 'marital': 'count'}).sort_index(ascending=True))
print(df.groupby(['age group', 'job']).agg({'job': 'count', 'marital': 'count'}).sort_index(ascending=True))

print(df[df['job'] == 'unemployed'].groupby('marital').agg({'job': 'count'}))

print(df.groupby(['marital', 'job']).agg({'job': 'count'}).sort_values(ascending=False, by='job').head())

print(df.groupby(["education", "job"]).agg({"education": "count"}).sort_values(by="education", ascending=False).head(5))

print(df.groupby(["job", "default"]).agg({'age': 'count'}).sort_values(by=['default', 'age'], ascending=False).head())

Prac 10
Demonstrate hypothesis testing, and ANOVA using a dataset
import pandas as pd
import seaborn as sns
from scipy.stats import ttest_ind, ttest_1samp

df = pd.read_csv(r"c:\Users\gagan\Downloads\crop_rec.csv")

# A. Two-Sample T-Test for Temperature and Humidity

rice = df[df['label'] == 'rice']
jute = df[df['label'] == 'jute']
banana = df[df['label'] == 'banana']
grapes = df[df['label'] == 'grapes']

# 1. Rice and Jute
t_temp_rice_jute, p_temp_rice_jute = ttest_ind(rice['temperature'], jute['temperature'], equal_var=False)
t_humid_rice_jute, p_humid_rice_jute = ttest_ind(rice['humidity'], jute['humidity'], equal_var=False)

# 2. Banana and Grapes
t_temp_banana_grapes, p_temp_banana_grapes = ttest_ind(banana['temperature'], grapes['temperature'], equal_var=False)
t_humid_banana_grapes, p_humid_banana_grapes = ttest_ind(banana['humidity'], grapes['humidity'], equal_var=False)

# B. One-Sample T-Test for pH of Mango
mango = df[df['label'] == 'mango']
t_ph_mango, p_ph_mango = ttest_1samp(mango['ph'], 7.5)

# Display Results
print("A. Two-Sample T-Test Results")
print("Rice vs Jute (Temperature): t-stat =", t_temp_rice_jute, "p-value =", p_temp_rice_jute)
print("Rice vs Jute (Humidity): t-stat =", t_humid_rice_jute, "p-value =", p_humid_rice_jute)
print("Banana vs Grapes (Temperature): t-stat =", t_temp_banana_grapes, "p-value =", p_temp_banana_grapes)
print("Banana vs Grapes (Humidity): t-stat =", t_humid_banana_grapes, "p-value =", p_humid_banana_grapes)

print("\nB. One-Sample T-Test Results")
print("Mango (pH): t-stat =", t_ph_mango, "p-value =", p_ph_mango)

# ... (Previous code for t-tests)

# Declare the Null Hypothesis
# 1. Rice vs Jute (Temperature and Humidity)

print("Hypothesis Testing for Rice vs Jute (Temperature):")
print("Null Hypothesis (H0): The mean temperature of rice and jute are the same.")
print("Alternative Hypothesis (H1): The mean temperature of rice and jute are different.")

print("\nHypothesis Testing for Rice vs Jute (Humidity):")
print("Null Hypothesis (H0): The mean humidity of rice and jute are the same.")
print("Alternative Hypothesis (H1): The mean humidity of rice and jute are different.")

# 2. Banana vs Grapes (Temperature and Humidity)
print("\nHypothesis Testing for Banana vs Grapes (Temperature):")
print("Null Hypothesis (H0): The mean temperature of banana and grapes are the same.")
print("Alternative Hypothesis (H1): The mean temperature of banana and grapes are different.")

print("\nHypothesis Testing for Banana vs Grapes (Humidity):")
print("Null Hypothesis (H0): The mean humidity of banana and grapes are the same.")
print("Alternative Hypothesis (H1): The mean humidity of banana and grapes are different.")


# 3. Mango (pH)
print("\nHypothesis Testing for Mango (pH):")
print("Null Hypothesis (H0): The mean pH of mango is 7.5.")
print("Alternative Hypothesis (H1): The mean pH of mango is not 7.5.")
# ... (Previous code for t-tests and hypotheses)

# Inferences
# 1) Inference based on Temperature

print("\nInferences:")

# Rice vs Jute (Temperature)
if p_temp_rice_jute > 0.05:  # Example threshold, adjust as needed
    print("Rice vs Jute (Temperature): Fail to reject the null hypothesis. There is not enough evidence to suggest a significant difference in mean temperatures.")
else:
    print("Rice vs Jute (Temperature): Reject the null hypothesis. There is evidence to suggest a significant difference in mean temperatures.")

# Banana vs Grapes (Temperature)
if p_temp_banana_grapes > 0.05: # Example threshold, adjust as needed
    print("Banana vs Grapes (Temperature): Fail to reject the null hypothesis. There is not enough evidence to suggest a significant difference in mean temperatures.")
else:
    print("Banana vs Grapes (Temperature): Reject the null hypothesis. There is evidence to suggest a significant difference in mean temperatures.")


# 2) Inference based on Humidity

# Rice vs Jute (Humidity)
if p_humid_rice_jute > 0.05:  # Example threshold, adjust as needed
    print("Rice vs Jute (Humidity): Fail to reject the null hypothesis. There is not enough evidence to suggest a significant difference in mean humidity.")
else:
    print("Rice vs Jute (Humidity): Reject the null hypothesis. There is evidence to suggest a significant difference in mean humidity.")

# Banana vs Grapes (Humidity)
if p_humid_banana_grapes > 0.05: # Example threshold, adjust as needed
    print("Banana vs Grapes (Humidity): Fail to reject the null hypothesis. There is not enough evidence to suggest a significant difference in mean humidity.")
else:
    print("Banana vs Grapes (Humidity): Reject the null hypothesis. There is evidence to suggest a significant difference in mean humidity.")


# 3) Inference based on pH

# Mango (pH)
if p_ph_mango > 0.05:  # Example threshold, adjust as needed
    print("Mango (pH): Fail to reject the null hypothesis. There is not enough evidence to suggest that the mean pH is different from 7.5.")
else:
    print("Mango (pH): Reject the null hypothesis. There is evidence to suggest that the mean pH is different from 7.5.")
# ... (Previous code for t-tests and hypotheses)

# Inferences
# 1) Inference based on Temperature

print("\nInferences:")

# Rice vs Jute (Temperature)
if p_temp_rice_jute < 0.05:  # Corrected condition to <
    print("Rice vs Jute (Temperature): Reject the Null Hypothesis. The mean temperature of rice and jute are significantly different.")
else:
    print("Rice vs Jute (Temperature): Fail to reject the Null Hypothesis. There is no significant difference in temperature between rice and jute.")

# ... (Output for Rice vs Jute Temperature Inference)

# 2) Inference based on Humidity

# Rice vs Jute (Humidity)
if p_humid_rice_jute < 0.05:  # Corrected condition to <
    print("Rice vs Jute (Humidity): Reject the Null Hypothesis. The mean humidity of rice and jute are significantly different.")
else:
    print("Rice vs Jute (Humidity): Fail to reject the Null Hypothesis. There is no significant difference in humidity between rice and jute.")

# ... (Output for Rice vs Jute Humidity Inference)

# 2) Banana vs Grapes
# 1) Inference based on Temperature

if p_temp_banana_grapes < 0.05: # Corrected condition to <
    print("Banana vs Grapes (Temperature): Reject the Null Hypothesis. The mean temperature of banana and grapes are significantly different.")
else:
    print("Banana vs Grapes (Temperature): Fail to reject the Null Hypothesis. There is no significant difference in temperature between banana and grapes.")

# ... (The rest of the inferences for Banana vs Grapes and Mango would go here)
# ... (Previous code for t-tests and hypotheses)

# Inferences

# 1) Inference based on Temperature

# Rice vs Jute (Temperature)
if p_temp_rice_jute < 0.05:
    print("Inference: Reject the Null Hypothesis. The mean temperature of rice and jute are significantly different.")
else:
    print("Inference: Fail to reject the Null Hypothesis. There is no significant difference in temperature between rice and jute.")

# ... (Output for Rice vs Jute Temperature Inference)

# 2) Inference based on Humidity

# Rice vs Jute (Humidity)
if p_humid_rice_jute < 0.05:
    print("Inference: Reject the Null Hypothesis. The mean humidity of rice and jute are significantly different.")
else:
    print("Inference: Fail to reject the Null Hypothesis. There is no significant difference in humidity between rice and jute.")

# ... (Output for Rice vs Jute Humidity Inference)

# 2) Banana vs Grapes
# 1) Inference based on Temperature

if p_temp_banana_grapes < 0.05:
    print("Inference: Reject the Null Hypothesis. The mean temperature of banana and grapes are significantly different.")
else:
    print("Inference: Fail to reject the Null Hypothesis. There is no significant difference in temperature between banana and grapes.")

# ... (Output for Banana vs Grapes Temperature Inference)

# 2) Inference based on Humidity

if p_humid_banana_grapes < 0.05:
    print("Inference: Reject the null hypothesis. The humidity requirements of banana and grapes are significantly different.")
else:
    print("Inference: Fail to reject the null hypothesis. The humidity requirements of banana and grapes are not significantly different.")

# ... (Output for Banana vs Grapes Humidity Inference)

# Inference based on p-value

if p_ph_mango < 0.05:
    print("Inference: Reject the Null Hypothesis. The pH of mango is significantly different from 7.5.")
else:
    print("Inference: Fail to reject the Null Hypothesis. The pH of mango is not significantly different from 7.5.")

# ... (Output for Mango pH Inference)
