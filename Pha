practical 1 eda
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("health_dataset.csv")
print(df.info())
print(df.describe())

# Null values
print(df.isnull().sum())

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# Boxplot for outliers
sns.boxplot(x=df["Average Total Payments"])
plt.title("Boxplot of Average Total Payments")
plt.show()

practical 2linear regression predict acreage Total Payments 
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X = df[["Average Covered Charges", "Average Medicare Payments"]]
y = df["Average Total Payments"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))

practical 3 breast cancer classification
from sklearn.datasets import load_breast_cancer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

data = load_breast_cancer()
X, y = data.data, data.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))


practical 4 diabetes prediction using ANN
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_diabetes

data = pd.read_csv("diabetes.csv")  # PIMA dataset format
X = data.drop("Outcome", axis=1)
y = data["Outcome"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(X.shape[1],)),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_scaled, y, epochs=50, batch_size=10)

practical 5 xray chest infection classification
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_data = datagen.flow_from_directory('chest_xray/', target_size=(150, 150), class_mode='binary', subset='training')
val_data = datagen.flow_from_directory('chest_xray/', target_size=(150, 150), class_mode='binary', subset='validation')

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(train_data, validation_data=val_data, epochs=10)

practical 6 survival prediction based on gene prediction
from sksurv.datasets import load_veterans_lung_cancer
from sksurv.linear_model import CoxPHSurvivalAnalysis
from sksurv.util import Surv

data_x, data_y = load_veterans_lung_cancer()
surv_data = Surv.from_dataframe("Status", "Survival_in_days", data_y)

model = CoxPHSurvivalAnalysis()
model.fit(data_x, surv_data)
print(model.coef_)

practical 7 clustering
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

# Simulated gene expression data
df = pd.read_csv("gene_expression.csv")
pca = PCA(n_components=2)
X_pca = pca.fit_transform(df)

kmeans = KMeans(n_clusters=3)
clusters = kmeans.fit_predict(X_pca)

plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='viridis')
plt.title("KMeans Clustering of Gene Expression")
plt.show()

practical 9 sentiment analysis
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

data = pd.read_csv("mental_health_posts.csv")
X = data["text"]
y = data["label"]

vectorizer = CountVectorizer()
X_vec = vectorizer.fit_transform(X)

model = MultinomialNB()
model.fit(X_vec, y)

practical 10 AI chatbot
import random

def health_chatbot():
    print("Hello! I am your health assistant. What symptoms are you experiencing?")
    while True:
        query = input("You: ").lower()
        if "fever" in query:
            print("Bot: You might have an infection. Consider seeing a doctor.")
        elif "cold" in query:
            print("Bot: Sounds like a viral cold. Rest and stay hydrated.")
        elif "exit" in query:
            print("Bot: Take care! Goodbye.")
            break
        else:
            print("Bot: Sorry, I don't understand. Try rephrasing.")

# health_chatbot()
